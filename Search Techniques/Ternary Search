/*
 * How to think ternary? If it is ternary, say we search for min value, then you know we keep decreasing, then increasing starts.
 * Think in the order of x ~-> f(x) that you need to try, and have intuitive if the given function behaves as we need or not.
 *
 * An intuitive of x's typically will be sorted numbers. Say sorted numbers are 1 2 3 4 5 6 7
 *
 * Say we evaluated the value at first position, we expect sum to be so high -> 21
 * Now, think what happens when we move to right 1 step?
 *
 * We got -6 from the left 6 numbers and got +1 for right number -> 16
 *
 * So the more we move to left, we become nearer to left numbers, and further from right numbers
 *
 * F function gives: 21 16 13 12 13 16 21.
 *
 * So search seems ternable search, one more validation is required, is inc/dec strict? Homework
 *
 * Note, although 16 is duplicate, it is strict dec, then strict enc
 *
 * What if numbers are: 1 2 3 4 4 4 4 5 6 7 8
 *
 * F function is : 37 28 21 16 16 16 16 19 24 31 40
 *
 * Number 16 is repeated 4 times! So definitely this is not strict and ternary won't work!
 *
 * True, but algorithm will work if the repetition in the mode value only. Homework: Validate! Don't take every thing as fact :)
 *
 * Homework: why ternary needs f space to be strict?
 *
 * E.g. if we want to find minimum value in given list 5 1 5 5 5 5 5, answer may be 5 not 1
 */








pair<double, double> ternaryReal() {
	double left = v[0], right = v.back(); // set your range
	while (right - left > EPS) { // stop when reaching almost right = left
		double g = left + (right - left) / 3, h = left + 2 * (right - left) / 3;

		if (f(g) < f(h)) // use > if f increase then decrease
			right = h;
		else
			left = g;
	}

	return make_pair(left, f(left));
}
-------------------------------------------------------------------------------------------------------------


pair<int, int> ternaryDiscrete() {
	int left = v[0], right = v.back(); // set your range
	while (right-left > 3) { // We need 4 different positions
		int g = left + (right - left) / 3, h = left + 2 * (right - left) / 3;

		if (f(g) < f(h)) // use > if f increase then decrease
			right = h;
		else
			left = g;
	}

	int solIdx = left, answer = f(left++);
	for (int i = left; i <= right; ++i)	// iterate on the remaining
		if(answer > f(i))
			answer = f(i), solIdx = i;

	return make_pair(solIdx, answer);
}

/*
 * What if we are given set of points (x, y) and need to find point p that has minimum Manhattan distance summation?
 * 	Now problem became 2D :(
 *
 * Remember the Independence feature
 * 		Minimize Manhattan Distance = Minimize on Xs + Minimize on Ys
 *
 * 		Hence once in 1D find best x, and once find best y
 *
 * 	What if function is square of the Euclidean distance?
 *
 * 	Similarly: Sum(Pi, p) = Sum (Pi.x-p.x)^2 + Sum (Pi.y-p.y)^2		for i [1-n], and p is target point
 *
 *
 *  What if function is the Euclidean distance?!!!
 *  Now it is really a 2D problem! You can't do a split!
 *
 *  This where Nested Ternary appears. We have 2 F functions.
 *  First ternary works on X in x ranges and call FX(x)
 *
 *  FX is a nested ternary function that works on y, given x and evaluates FXY(x, y)
 *
 *  WAIT! For both functions, you must guarantee that their spaces are strict dec/enc! Homework
 *
 *  Homework: Read about Golden section search and Fibonacci search
 */
