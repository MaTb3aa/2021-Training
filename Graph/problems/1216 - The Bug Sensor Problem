/***  الرحيم الرحمن الله بسم   ***/
#include<bits/stdc++.h>
#define sz(s)               (int)s.size()
#define mem(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define INF 0x3f3f3f3f3f3f3f3fLL
#define OO  0x3f3f3f3f
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
using namespace std;
template<typename T>
using Graph = vector<vector<T>>;
typedef long long ll;
typedef unsigned long long ull;
const int N = 350, M = 2000 + 5, mod = 1e9 + 7;
void run() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
	//freopen("groups.in", "r", stdin);
#endif
}

vector<int> parent;

void make_set(int v) {
    parent[v] = v;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        parent[b] = a;
    }
}

struct Edge {
    int u, v;
    double weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};
double dis(pair<ll,ll>p1,pair<ll,ll>p2){
	return sqrt((p1.first-p2.first)*(p1.first-p2.first) +
				(p1.second-p2.second)*(p1.second-p2.second));
}
int tt=1;
int main() {
	run();
	int t;
	cin>>t;
	while(t--){
		int TR;
		cin>>TR;
		vector<pair<ll,ll>>v;
		int x,y;
		while(cin>>x&&x!=-1){
			cin>>y;
			v.push_back({x,y});
		}
		int n=sz(v);

		vector<Edge>edges;
		for (int i = 0; i < n; ++i) {
			for (int j = i+1; j < n; ++j) {
				edges.push_back({i,j,dis(v[i],v[j])});
			}
		}
		parent = vector<int>(n+2);
		for (int i = 0; i <= n; ++i)make_set(i);


		sort(edges.begin(), edges.end());

		vector<double>costs;
		for (Edge e : edges) {
		    if (find_set(e.u) != find_set(e.v)) {
		        costs.push_back(e.weight);
		        union_sets(e.u, e.v);
		    }
		}
		sort(costs.rbegin(),costs.rend());
		if(TR>sz(costs))cout<<0<<endl;
		else cout<<(ll)ceil(costs[TR-1])<<endl;

	}


}
