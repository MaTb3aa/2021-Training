/***  بسم الله الرحمن ا لرحيم   ***/
/* MaTb3aa */
#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include<unordered_map>
#define endl                         '\n'
#define Ceil(x,y)             ((x+y-1)/y)
#define sz(s)               (int)s.size()
#define RT(x)           return cout<<x,0;
#define mem(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define test int t;cin>>t;while(t--)
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const double PI = acos(-1), EPS = 1e-7;
const int OO = 0x3f3f3f3f, N = 1e6 + 5, mod = 1e9 + 7;
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
ll gcd(ll x, ll y) { return (!y) ? x : gcd(y, x % y); }
ll lcm(ll x, ll y) { return ((x / gcd(x, y)) * y); }
void file() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

#endif  !ONLINEJUDGE
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

}
vector<vector<int>>g;
vector<int>dfsn, low, art;
int T,root;
void DFS(int u, int p) {
	dfsn[u] = low[u] = ++T;
	for (auto ch : g[u]) {
		if (!dfsn[ch]) {
			DFS(ch, u);
			low[u] = min(low[u], low[ch]);
			if (low[ch] >= dfsn[u]) {
				if (!root && dfsn[u] == 1)root = 1;
				else art[u] = 1;
			}
		}
		else if (ch != p) {
			low[u] = min(low[u], dfsn[ch]);
		}
	}
}

void init(int n) {
	T = root = 0;
	g = vector<vector<int>>(n + 1);
	dfsn = low = art = vector<int>(n + 1);
}


int main() {
	file();
	int n;
	while (cin >> n && n) {
		init(n);
		cin.ignore();
		string s;
		while (getline(cin, s)) {
			if (s == "0")break;
			int v,idx;
			stringstream ss(s);
			ss >> idx;
			while (ss >> v) {
				g[idx].push_back(v);
				g[v].push_back(idx);
			}
		}
		
		DFS(1, -1);
		int cnt = 0;
		for (int i = 1; i <= n; i++)if (art[i]) cnt++;
		
		cout << cnt << endl;

	}

}