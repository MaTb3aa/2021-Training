/***  الرحيم الرحمن الله بسم   ***/
#include<bits/stdc++.h>
#define sz(s)               (int)s.size()
#define mem(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define IO ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int OO = 0x3f3f3f3f, N = 100000 + 5, mod = 1e9 + 7;
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
void run() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
	//freopen("groups.in", "r", stdin);
#endif
}

/*
 * -Please take 2 minute to find tricky test^^
1- Read all test cases before typing code
2- check data types
3- write TLE code then optimize it
4- get WR-> take example and analysis it
5- valid input ..data swap
6- dp ret minval or maxval and memo is exist
 */
int n,k;
int a[105];
int dp[300005];
bool IsWinning(int rem){
	if(!rem)return false; // can't move = lose = terminal position
	if(dp[rem]!=-1)return dp[rem];
	for (int i = 0; i < n; ++i) {
		if(rem>=a[i] && !IsWinning(rem-a[i]))// play optimally
			// opponent lose from this move
			return dp[rem]=true;// any lose = i win
	}
	return dp[rem]=false; // all moves make opponent win  = i lose
}
int main() {//IO
	run();
	cin>>n>>k;
	for (int i = 0; i < n; ++i) {
		cin>>a[i];
	}
	mem(dp,-1);
	if(IsWinning(k))cout<<"First\n";
	else cout<<"Second\n";

}
