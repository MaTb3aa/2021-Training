we can use it in this 
// MIN,MAX,SUM,MULT,GCD
struct sparse_table {
	vector<int> v, lg;
	vector<vector<int>> sparseTable;
	sparse_table(vector<int> &v) :
			v(v), lg(v.size() + 1) {
		int n = v.size();
		//to get log2 in O(1)
		for (int i = 2; i <= n; i++) {
			lg[i] = lg[i - 1];
			if ((i & i - 1) == 0)
				lg[i]++;
		}
		int logN = lg[n];
		sparseTable = vector<vector<int>>(n, vector<int>(logN + 1));
		for (int i = 0; i < n; i++)
			sparseTable[i][0] = v[i];
		for (int k = 1; k <= logN; k++)
			for (int i = 0; i + (1 << k - 1) < n; i++) {
				sparseTable[i][k] = max(sparseTable[i][k - 1],
						sparseTable[i + (1 << k - 1)][k - 1]);
			}
	}
	int rmq(int l, int r) {
		int k = lg[r - l + 1];
		return max(sparseTable[l][k], sparseTable[r - (1 << k) + 1][k]);
	}
};


  // Do sum query [l, r] in O(log2(n)).
  //
  // Perform a cascading query which shrinks the left endpoint while summing over all the intervals
  // which are powers of 2 between [l, r].
  //
  // WARNING: This method can easily produces values that overflow.
  //
  // NOTE: You can achieve a faster time complexity and use less memory with a simple prefix sum
  // array. This method is here more as a proof of concept than for its usefulness.
  private long sumQuery(int l, int r) {
    long sum = 0;
    for (int p = log2[r - l + 1]; l <= r; p = log2[r - l + 1]) {
      sum += dp[p][l];
      l += (1 << p);
    }
    return sum;
  }

  private long multQuery(int l, int r) {
    long result = 1;
    for (int p = log2[r - l + 1]; l <= r; p = log2[r - l + 1]) {
      result *= dp[p][l];
      l += (1 << p);
    }
    return result;
  }
 
