int t,n,m,lazy[4*N],l,r,val,f,sieve[N],tree[4*N],a[N];
void build(int n , int s , int e){
	if(s == e){
		if(sieve[a[s]])
			tree[n] = 1;
		else
			tree[n]=0;
		return;
	}
	build(2*n,s,(s+e)/2);
	build(2*n+1,(s+e)/2+1,e);
	tree[n] = (tree[2*n]+tree[2*n+1]);
}

void push(int n,int s,int e){
	if(lazy[n]){
		if(sieve[lazy[n]])
			tree[n]=(e-s+1);
		else
			tree[n]=0;

		lazy[2*n]=lazy[n];
		lazy[2*n+1]=lazy[n];
	}
	lazy[n]=0;
}
void update(int n,int s,int e){
	 push(n,s,e);
	 if(s>r || e<l)return ;
	 if(l<=s&&e<=r){
		 lazy[n]=val;
		 push(n,s,e);
		 return ;
	 }
	 int md=s+e>>1;
	 update(n*2,s,md);
	 update(2*n+1,md+1,e);
	 tree[n]=tree[2*n+1]+tree[n*2];
}
ll get(int n,int s,int e){
	push(n,s,e);
	if(s>r || e<l)return 0;
	if(l<=s&&e<=r)return tree[n];
	int md=s+e>>1;
	return get(2*n,s,md)+get(2*n+1,md+1,e);
}
