/***  الرحيم الرحمن الله بسم   ***/
//==================================================================//
#include<bits/stdc++.h>
using namespace std;
#define sz(s)               (int)s.size()
#define clr(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define INF 0x3f3f3f3f3f3f3f3fLL
#define OO  0x3f3f3f3f
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define popcount(n) __builtin_popcount(n)
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//==================================================================//

//==================================================================//
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
template<typename T>
using Graph = vector<vector<T>>;
typedef long long ll;
typedef unsigned long long ull;
//==================================================================//


//==================================================================//
void printDouble(double f,int p){ cout << fixed;                    //
	 cout << setprecision(p) << f <<endl; }                         //
int  Set(int N,int cur){ return N = N | (1<<cur); }                 //
int  Reset(int N,int cur){ return N = N & ~(1<<cur); }              //
bool Check(int N,int cur){ return (bool)(N & (1<<cur)); }           //
ll   GCD(ll a,ll b){ if(b == 0) return a; return GCD(b,a%b);}       //
ll   LCM(ll a,ll b){ return a*b/GCD(a,b);}                          //
ll   POW(ll a,ll p){ ll res = 1,x = a;while(p){if(p&1)              //
	 res = (res*x); x = (x*x);p >>= 1;} return res;}                //
//==================================================================//


//==================================================================//
void run() {
	ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
//	freopen("stations.in", "r", stdin);
#endif
}
//==================================================================//
const int N = 50000+5, M = 1e5 + 5, mod = 1e9 + 7;
int n,q;
int a[N];
struct data {
	int pre,suf,sum,max;
}seg[4*N];
data merge(data l ,data r){
	data ans;
	ans.sum=(l.sum+r.sum);
	ans.pre= max(l.pre,l.sum+r.pre);
	ans.suf=max(r.suf,r.sum+l.suf);
	ans.max=max({l.max,r.max,l.suf+r.pre});
	return ans;
}
void build(int n,int s,int e){
	if(s==e){
		seg[n].pre=seg[n].suf=seg[n].max=seg[n].sum=a[s];
		return ;
	}
	int md=s+e>>1;
	build(2*n,s,md);
	build(2*n+1,md+1,e);
	seg[n]=merge(seg[2*n],seg[2*n+1]);
}
data get(int n,int s,int e,int x,int y){
	if(s==x&&e==y){
		return seg[n];
	}
	int md=s+e>>1;
	int l=n<<1;
	int r=l|1;
	if(y<=md)
		return get(l,s,md,x,y);
	else if(x>md)
		return get(r,md+1,e,x,y);
	else {
		return merge(get(l,s,md,x,md),get(r,md+1,e,md+1,y));
	}
}
int main() {
	run();
	cin>>n;
	for (int i = 0; i < n; ++i) {
		cin>>a[i];
	}
	build(1,0,n-1);
	cin>>q;
	while(q--){
		int l,r;
		cin>>l>>r;
		cout<<get(1,0,n-1,l-1,r-1).max<<endl;
	}








}
