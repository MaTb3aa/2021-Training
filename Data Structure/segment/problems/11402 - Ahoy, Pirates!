/***  الرحيم الرحمن الله بسم   ***/
//==================================================================//
#include<bits/stdc++.h>
using namespace std;
#define sz(s)               (int)s.size()
#define clr(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define INF 0x3f3f3f3f3f3f3f3fLL
#define OO  0x3f3f3f3f
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define popcount(n) __builtin_popcount(n)
#pragma optimization_level 3
#define lft n<<1
#define ryt n<<1|1
#pragma GCC optimize("Ofast,no-stack-protector,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//==================================================================//

//==================================================================//
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
template<typename T>
using Graph = vector<vector<T>>;
typedef long long ll;
typedef unsigned long long ull;
//==================================================================//


//==================================================================//
void printDouble(double f,int p){ cout << fixed;                    //
	 cout << setprecision(p) << f <<endl; }                         //
int  Set(int N,int cur){ return N = N | (1<<cur); }                 //
int  Reset(int N,int cur){ return N = N & ~(1<<cur); }              //
bool Check(int N,int cur){ return (bool)(N & (1<<cur)); }           //
ll   GCD(ll a,ll b){ if(b == 0) return a; return GCD(b,a%b);}       //
ll   LCM(ll a,ll b){ return a*b/GCD(a,b);}                          //
ll   POW(ll a,ll p){ ll res = 1,x = a;while(p){if(p&1)              //
	 res = (res*x); x = (x*x);p >>= 1;} return res;}                //
//==================================================================//


//==================================================================//
void run() {
	ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
//	freopen("stations.in", "r", stdin);
#endif
}
//==================================================================//
const int N = 1024000+5, M = 1e5 + 5, mod = 1e9 + 7;
int t,n,m,lazy[4*N],l,r,val,f,tree[4*N];
enum{ CLR = 0 , ZERO  , ONE , FLIP};
char c;
string a;
void build(int n , int s , int e){
	lazy[n]=CLR;
	if(s == e){
		tree[n] = a[s]-'0';
		return;
	}
	build(2*n,s,(s+e)/2);
	build(2*n+1,(s+e)/2+1,e);
	tree[n] = (tree[2*n]+tree[2*n+1]);
}
int doFlip(int x) {
    if( x == ONE ) return ZERO ;
    if( x == ZERO ) return ONE ;
    if( x == FLIP ) return CLR ;
    return FLIP ;
}
void push(int n,int s,int e){
	if( lazy[n] == CLR ) return ;
	    if( lazy[n] == ONE ) {
	        tree[n] = e - s + 1 ;
	    }
	    else if( lazy[n] == ZERO ) {
	        tree[n] = 0;
	    }
	    else if( lazy[n] == FLIP ) {
	        tree[n] = ( e - s + 1 ) - tree[n];
	    }
	    if( s != e ) {
	        if( lazy[n] == ONE || lazy[n] == ZERO ) {
	            lazy[lft] = lazy[ryt] = lazy[n];
	        } else {
	            lazy[lft] = doFlip(lazy[lft]);
	            lazy[ryt] = doFlip(lazy[ryt]) ;
	        }
	    }
	    lazy[n] = CLR ;
}

/* Set all the values to 1 */
void update1(int n , int l , int r , int x , int y ){

    if( lazy[n] != CLR ) push(n,l,r);

    if( l > y || x > r ) return ;

    if( l >= x && r <= y ) {
    	tree[n] = r - l + 1 ;
        lazy[lft] = lazy[ryt] = ONE ;
        return ;
    }
    int mid = (l+r) >> 1 ;
    update1(lft,l,mid,x,y);
    update1(ryt,mid+1,r,x,y);
    tree[n] = tree[lft] + tree[ryt];
}
/* Set all the values to 0 */
void update2(int n , int l , int r , int x , int y ){

    if( lazy[n] != CLR ) push(n,l,r);

    if( l > y || x > r ) return ;

    if( l >= x && r <= y ) {
    	tree[n] = 0 ;
        lazy[lft] = lazy[ryt] = ZERO ;
        return ;
    }
    int mid = (l+r) >> 1 ;
    update2(lft,l,mid,x,y);
    update2(ryt,mid+1,r,x,y);
    tree[n] = tree[lft] + tree[ryt];
}
/* flip all the all values in range */
void updne3(int n , int l , int r , int x , int y ){
    if( lazy[n] != CLR ) push(n,l,r);
    if( l > y || x > r ) return ;
    if( l >= x && r <= y ) {
        tree[n] = ( r - l + 1 ) - tree[n] ;
        lazy[lft] = doFlip( lazy[lft] );
        lazy[ryt] = doFlip( lazy[ryt] );
        return ;
    }
    int mid = (l+r) >> 1 ;
    updne3(lft,l,mid,x,y);
    updne3(ryt,mid+1,r,x,y);
    tree[n] = tree[lft] + tree[ryt];
}
ll get(int n,int s,int e){
	if(lazy[n]!=CLR)push(n,s,e);
	if(s>r || e<l)return 0;
	if(l<=s&&e<=r)return tree[n];
	int md=s+e>>1;
	return get(2*n,s,md)+get(2*n+1,md+1,e);
}
int test=1;
int main() {
	run();
	cin>>t;
	while(t--){
		cin>>m;
		a="";
		clr(tree,0);
		clr(lazy,0);
		while(m--){
			int x;cin>>x;
			string d;cin>>d;
			while(x--)a+=d;
		}
		int n=sz(a)-1;
		build(1, 0, n);
		cin>>m;
		cout<<"Case "<<test++<<":\n";
		int q=1;
		while(m--){
			cin>>c>>l>>r;
			if(c=='I')updne3(1, 0, n,l,r);
			else if(c=='F')update1(1,0,n,l,r);
			else if (c=='E')update2(1,0,n,l,r);
			else {
				cout<<"Q"<<q++<<": ";
				cout<<get(1,0,n)<<endl;
			}

		}

	}

}
