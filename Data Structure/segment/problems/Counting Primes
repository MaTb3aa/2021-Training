/***  الرحيم الرحمن الله بسم   ***/
//==================================================================//
#include<bits/stdc++.h>
using namespace std;
#define sz(s)               (int)s.size()
#define clr(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define INF 0x3f3f3f3f3f3f3f3fLL
#define OO  0x3f3f3f3f
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define popcount(n) __builtin_popcount(n)
#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//==================================================================//

//==================================================================//
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
template<typename T>
using Graph = vector<vector<T>>;
typedef long long ll;
typedef unsigned long long ull;
//==================================================================//


//==================================================================//
void printDouble(double f,int p){ cout << fixed;                    //
	 cout << setprecision(p) << f <<endl; }                         //
int  Set(int N,int cur){ return N = N | (1<<cur); }                 //
int  Reset(int N,int cur){ return N = N & ~(1<<cur); }              //
bool Check(int N,int cur){ return (bool)(N & (1<<cur)); }           //
ll   GCD(ll a,ll b){ if(b == 0) return a; return GCD(b,a%b);}       //
ll   LCM(ll a,ll b){ return a*b/GCD(a,b);}                          //
ll   POW(ll a,ll p){ ll res = 1,x = a;while(p){if(p&1)              //
	 res = (res*x); x = (x*x);p >>= 1;} return res;}                //
//==================================================================//


//==================================================================//
void run() {
	ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
//	freopen("stations.in", "r", stdin);
#endif
}
//==================================================================//
const int N = 1000010+5, M = 1e5 + 5, mod = 1e9 + 7;
int t,n,m,lazy[4*N],l,r,val,f,sieve[N],tree[4*N],a[N];
void generate() {
	memset(sieve, 1, sizeof sieve);
	sieve[0] = sieve[1] = 0;
	for (int i = 4; i < N; i += 2)
		sieve[i] = 0;
	for (int i = 3; i * i < N; i += 2) {
		if (!sieve[i])
			continue;
		for (int j = i * i; j < N; j += i + i)
			sieve[j] = 0;
	}
}
void build(int n , int s , int e){
	if(s == e){
		if(sieve[a[s]])
			tree[n] = 1;
		else
			tree[n]=0;
		return;
	}
	build(2*n,s,(s+e)/2);
	build(2*n+1,(s+e)/2+1,e);
	tree[n] = (tree[2*n]+tree[2*n+1]);
}

void push(int n,int s,int e){
	if(lazy[n]){
		if(sieve[lazy[n]])
			tree[n]=(e-s+1);
		else
			tree[n]=0;

		lazy[2*n]=lazy[n];
		lazy[2*n+1]=lazy[n];
	}
	lazy[n]=0;
}
void update(int n,int s,int e){
	 push(n,s,e);
	 if(s>r || e<l)return ;
	 if(l<=s&&e<=r){
		 lazy[n]=val;
		 push(n,s,e);
		 return ;
	 }
	 int md=s+e>>1;
	 update(n*2,s,md);
	 update(2*n+1,md+1,e);
	 tree[n]=tree[2*n+1]+tree[n*2];
}
ll get(int n,int s,int e){
	push(n,s,e);
	if(s>r || e<l)return 0;
	if(l<=s&&e<=r)return tree[n];
	int md=s+e>>1;
	return get(2*n,s,md)+get(2*n+1,md+1,e);
}
int main() {
	run();
	generate();
	cin>>t;
	int test=1;
	while(t--){
		clr(tree,0);
		clr(lazy,0);
		cout<<"Case "<<test++<<":\n";
		cin>>n>>m;
		for (int i = 1; i <= n; ++i)cin>>a[i];
		build(1, 1, n);
		while(m--){
			cin>>f;
			if(!f){
				cin>>l>>r>>val;
				update(1, 1, n);
			}
			else {
				cin>>l>>r;
				cout<<get(1, 1, n)<<endl;
			}
		}
	}

}
