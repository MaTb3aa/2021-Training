Most of counting involves duplicate counting
issue [count item more than once].
◼ IE principle is a generic sum rule to solve that
◼
◼ 2^3 -1 = 7 subsets (exponential)
◼ General Computations
◼ Enumerate all subsets
◼ Compute each one intersection
◼ If odd subset add (include) it
◼ If even subset subtract (exclude) it


How many integers in {1,2 ...,100} are
divisible by 2, 3, 5 or 7?
◼ How many divisible by 2? 100 / 2 = 50
◼ How many divisible by 3? 100 / 3 = 33
◼ How many divisible by 2, 3? 100 / (2*3) = 16
◼ How many divisible by 2, 3, 7? 100 / 42 = 2 => {42, 84}
◼ Answer: compute 2^4 -1 terms = 15 terms
◼ F(2)+F(3)+F(5)+F(7)
◼ -F(2, 3)-F(2, 5)-F(2, 7)-F(3, 5)-F(3, 7)-F(5, 7)
◼ +F(2, 3, 5)+F(2, 3, 7)+F(2, 5, 7)+F(3, 5, 7)
◼ -F(2, 3, 5, 7)


int a[]={2,3,8,10};
	int solve(int idx,int d,int sign){
		if(idx==4){
			if(d==1){
				return 0;
			}
	
			return 100*sign/d;
		}
		return solve(idx+1,d,sign)+solve(idx+1,LCM(d,a[idx]),sign*-1);
	}
