GCD(A, B)     ⌊A / B⌋     gcd(a, b) = a * x + b * y        x = prev_y     y = prev_x - q * x

(1180, 482)    2          2 = 1180 (-29) + 482 * (71)       -29           13 - 2 * (-29) = 71
(482, 216)     2          2 = 482 (13)+ 216 (-29)            13           -3 - 2 * 13 = -29
(216, 50)      4          2 = 216 (-3) + 50 (13)             -3            1 - 4 * (-3) = 13
(50, 16)       3          2 = 50 + 16 (-3)                    1            0 - 3 * 1 = -3
(16, 2)        8          2 = 0 * 16 + 1 * 2                  0            1
(2, 0)                    2 = 1 * 2 + 0 * 0                   1            0 (base case)



For each input line the output line should consist of three integers X, Y and D, separated with space.
If there are several such X and Y , you should output that pair for which |X| + |Y | is the minimal. If
there are several X and Y satisfying the minimal criteria, output the pair for which X ≤ Y .

// ax+by = g = gcd(a,b)
ll extended_eculid(ll a,ll b,ll &x,ll &y){
	if(b==0){
		x=1;y=0;
		return a;
	}
	ll g = extended_eculid(b, a%b, y, x);
	// now our x = previous y
	y-=(a/b)*x;
	return g;
}
int main() {
	run();
	ll x=0,y=0;
	extended_eculid(1180,482,x,y);
	cout<<x<<" "<<y<<endl;
}

Bézout's identity

Assume a > 0 and b > 0
◼ ax + by = g = gcd(a, b) => we know that
◼ Can we generate further solutions?
◼ Is following valid:
◼ a(x+b) + b(y-a) = g
◼ Yes, we added ab - ab, so same equation
◼ a(x+b/g) + b(y-a/g) = g
◼ a(x+kb/g) + b(y-ka/g) = g
◼ With easy math, we can generate!
