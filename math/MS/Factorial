


// n! % x	where x <= n	-> 0
// Wilson's theorem: (p-1)!%p = p-1 IFF p is prime
// 2! is the only prime factorial


// Number of factorial digits?
// how many digit for 1000? 1050? 9000 ? 9999? 4 digits. Use 1 + (int)log10(n)
// pow(10, log10(X) ) = X
// log(a*b) = log(a)+log(b)
// Then: double d = log(n!) = log(1) + log(2) .... log(n)
cout<<floor(d)+1

// What about number of bits for factorial? Think as above. Remember, 8 needs only 4 bits

//log2(120) = 6.906, rounded up become 7 (bits)
log2(2) + log2(3) + log2(4) + log2(5) = 6.906, which gives same result



// Given a prime p, and n!, what is max x such that n! divisble by p^x

n! % (p^x) == 0

Ex : n = 5 --> 5! = 120       find max x such that n! % 2^x == 0 
                    1   2    3    4     5
                    2^0 2^1  3^1  2^2  5^1

// Very important function
int FactN_PrimePower(int n, int p) {		// O(log(n) base p)
    int pow = 0;
    for(int i = p; i <= n ; i = i * p)
    	pow += n/i;

    return pow;
}



// Factorial Factorization: n! = p1^a * p2^b ...
// What are possible primes in n!? Factorial is exponential, but finally it consist of [1-n]
// So primes in range n

// Seive on n, get primes in range n
// For each prime number p
//	call FactN_PrimePower(n, p)




// Given m, what is max x such that m^x divides n!?
// Again, think in prime representation.
// let's simplify, uch that m^x divides g?
// Let m =  2^3 * 5^4
// Let g =  2^10 * 5^8 * 11^3
// Then 1st we can with 2 and 5 only.
// 10/3 = 3, then max for p1=2 is (2^3)^3
// 8/4 =2, so max is (5^4)^2
// Then let x = min(3, 2) = 2...so m^2 divides g
//
// what if m = 2^3 * 5^4 * 7^2 ? then it doesn't divide g, and x = 0
//
// what about n!?
// Then factroize m
//	for each p^x in m
//		check power in n!, and follow as above



// What about calc gcd(!m, n)
// gcd is greatest common divisor
// Let m =  2^3 * 5^7
// Let n =  2^10 * 5^3 * 11^3
// then gcd is min of each power, so that it divides both, and largest
// gcd = 2 ^ min(3, 10) * 5 ^ min(7, 3) * 11 ^ min(0, 3)
//
// Then factroize n
//	for each p^x in n
//		check power in m!, and use min of powers



// How many trailing zeros in n!?	E.g. 15! = 1307674368000	-> 3 zeros
// How to calculate them? How zero come in base 10? 2*5
// Then, if w know that n! = 2^a * 5^b * reminder...then we have min(a, b) zeros.
// More simpler, count of 2s > count of 5s in n!...then min(a, b) = b always
// What about n! base X? how many zeros?
// Again, Let X = 16 (hexidecimal), when zero appears?...notice (10 in base 16 equals 16 in base 10)
// Again, every time n! has X, we have a nother Zero
// So how many Xs there in n!?
// Factorize X, check its primes power in n!


// Get right most non zero digit of factorial N? So in 15! will be 8
// Let's simplify. Last digit of X = X%10
// Let X = 123000, then last non zero digit of X = 3
// Let X = 123 * 10^3, so 3 = 123%10
// Note (a*b*c)%D = (a%D * b%D * c%D) % D

// If in n! we could represent it as = 10^x * reminder...then reminder%10 is the answer
// again, Let n! = 2^a * 5^b * reminder1
// Then	n! = 10^b * reminder2

// So to calculate reminder2 we need to cacl n! such that we don't consider b 2's and b 5's
// In fact, all 5's wont't be used, and we will use overall a-b 2's

// Let n = 15, n! = 1307674368000 = 2^11 * 5^3 * 5108103
// So n! has 3 zeros
// We want to calculate n! with only 11-3 2's
// Let X = 2^8 * 5108103 = 1307674368		so X%10 = 8



// Exercise: Given M, How to get Smallest N, such that N! has M Trailing Zeros?







