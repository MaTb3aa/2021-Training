
Graph DSU problems/***  الرحيم الرحمن الله بسم   ***/
#include<bits/stdc++.h>
#define sz(s)               (int)s.size()
#define mem(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int OO = 0x3f3f3f3f, N = 300000 + 5, mod = 1e5 + 7;
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
void run() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
	//freopen("groups.in", "r", stdin);
#endif
}

vector<int> parent;

void make_set(int v) {
    parent[v] = v;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        swap(a, b);
        parent[b] = a;

    }
}

struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};

int main() {
	run();
	int n,m;
	while(cin>>n>>m){
		if(!n && !m)return 0;
		vector<Edge> edges;
		ll cost = 0;
		parent.clear();
		parent.resize(n+5);
		for (int i = 0; i <= n; i++)make_set(i);
		ll sum=0;
		while(m--){
			int a,b,c;
			cin>>a>>b>>c;
			edges.push_back({a,b,c});
			sum+=c;
		}
		sort(edges.begin(), edges.end());
		for (Edge e : edges) {
		    if (find_set(e.u) != find_set(e.v)) {
		        cost += e.weight;
		        union_sets(e.u, e.v);
		    }
		}
		cout<<sum-cost<<endl;

	}

}
