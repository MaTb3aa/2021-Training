/***  الرحيم الرحمن الله بسم   ***/
#include<bits/stdc++.h>
#define sz(s)               (int)s.size()
#define mem(x,y)    memset(x,y,sizeof(x))
#define all(v) ((v).begin()), ((v).end())
#define RT(x)           return cout<<x,0;
#define endl                         '\n'
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define IO ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
const int dx[] = { 0, -1, 0, 1, 1, 1, -1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int OO = 0x3f3f3f3f, N = 300000 + 5, mod = 1e5 + 7;
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
void run() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#else
	//freopen("groups.in", "r", stdin);
#endif
}
int par[N],vis[N];
vector<vector<int>>edges;
int find(int u){
	if(u==par[u])return u;
	return par[u]=find(par[u]);
}
void join(int u,int v){
	u=find(u);
	v=find(v);
	if(u==v)return;
	par[v]=u;
}
struct edge{
	int u,v,w;
	bool operator <(edge const &other){
		return w<other.w;
	}
};
void dfs(int u){
	vis[u]=1;
	for(auto t : edges[u]){
		if(!vis[t])dfs(t);
	}
}
int tt=1;
int main() {//IO
	run();
	int t;cin>>t;
	while(t--){
		int n,m,A;
		cin>>n>>m>>A;
		edges = vector<vector<int>>(n+1);
		vector<edge>g(m);
		while(m--){
			int a,b,c;
			cin>>a>>b>>c;
			edges[a].push_back(b);
			edges[b].push_back(a);
			g.push_back({a,b,c});
		}
		for (int i = 1; i <= n; ++i)par[i]=i;
		mem(vis,0);
		ll cost=0;
		int airports=0;
		sort(all(g));
		for(int i=1;i<=n;i++){
			if(!vis[i]){
				dfs(i);airports++;
				cost+=A;
			}
		}
		sort(all(g));
		for(auto e:g){
			if(find(e.u)!=find(e.v)){
				//cout<<e.u<<" "<<e.v<<endl;
				if(e.w>=A)airports++,cost+=A;
				else cost+=e.w;
				join(e.u,e.v);
			}
		}
		cout<<"Case #"<<tt++<<": ";
		cout<<cost<<" "<<airports<<endl;
	}

}
